plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
}

android {
    compileSdk 34

    defaultConfig {
        applicationId "com.shell.miner"
        minSdk 24  // Android 7.0+ for modern ARM64 support
        targetSdk 34
        versionCode 1
        versionName "1.0.0-beta"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Native library configuration
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a'  // Focus on ARM architectures
        }
        
        // Test configuration
        testInstrumentationRunnerArguments clearPackageData: 'true'
        
        // CMake configuration for native C++ code
        externalNativeBuild {
            cmake {
                cppFlags '-std=c++17 -frtti -fexceptions'
                arguments '-DANDROID_ARM_NEON=TRUE',
                          '-DANDROID_STL=c++_shared',
                          '-DCMAKE_BUILD_TYPE=Release'
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            jniDebuggable true
            
            // Enable native debugging
            packagingOptions {
                doNotStrip "**/*.so"
            }
            
            // Performance testing build variant
            buildConfigField "boolean", "ENABLE_BENCHMARKS", "true"
            buildConfigField "String", "BUILD_TYPE", '"debug"'
        }
        
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // Optimized release build for performance testing
            buildConfigField "boolean", "ENABLE_BENCHMARKS", "false"
            buildConfigField "String", "BUILD_TYPE", '"release"'
            
            // Native optimization flags
            externalNativeBuild {
                cmake {
                    arguments '-DCMAKE_BUILD_TYPE=Release',
                              '-DANDROID_ARM_NEON=TRUE',
                              '-DCMAKE_CXX_FLAGS_RELEASE=-O3 -DNDEBUG -ffast-math'
                }
            }
        }
        
        benchmark {
            initWith debug
            matchingFallbacks = ['debug']
            
            // Special build for performance benchmarking
            buildConfigField "boolean", "ENABLE_BENCHMARKS", "true"
            buildConfigField "boolean", "ENABLE_DETAILED_LOGGING", "true"
            buildConfigField "String", "BUILD_TYPE", '"benchmark"'
            
            // Maximum optimization for accurate benchmarking
            externalNativeBuild {
                cmake {
                    arguments '-DCMAKE_BUILD_TYPE=RelWithDebInfo',
                              '-DANDROID_ARM_NEON=TRUE',
                              '-DENABLE_PERFORMANCE_COUNTERS=TRUE'
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += [
            '-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi',
            '-opt-in=kotlin.time.ExperimentalTime'
        ]
    }

    buildFeatures {
        compose true
        buildConfig true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.5.8'
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
        
        // Include native libraries for all architectures during testing
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libshellmining.so'
    }

    // External native build configuration
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }
    
    // Test options for integration testing
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
        
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        
        // Performance test configuration
        managedDevices {
            devices {
                maybeCreate("pixel6Api33").apply {
                    device = "Pixel 6"
                    apiLevel = 33
                    systemImageSource = "aosp"
                }
                
                maybeCreate("nexus5Api29").apply {
                    device = "Nexus 5"
                    apiLevel = 29
                    systemImageSource = "aosp"
                }
            }
            
            groups {
                maybeCreate("testing").apply {
                    targetDevices.addAll(devices.pixel6Api33, devices.nexus5Api29)
                }
            }
        }
    }
    
    // Benchmark test source sets
    sourceSets {
        benchmark {
            java.srcDirs += 'src/benchmark/kotlin'
        }
    }
}

dependencies {
    // Core Android dependencies
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0'
    
    // Jetpack Compose
    implementation platform('androidx.compose:compose-bom:2024.02.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.activity:activity-compose:1.8.2'
    implementation 'androidx.navigation:navigation-compose:2.7.6'
    
    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    
    // Dependency Injection
    implementation 'com.google.dagger:hilt-android:2.48.1'
    implementation 'androidx.hilt:hilt-navigation-compose:1.1.0'
    kapt 'com.google.dagger:hilt-android-compiler:2.48.1'
    
    // Network & Serialization
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.2'
    
    // Local Storage
    implementation 'androidx.room:room-runtime:2.6.1'
    implementation 'androidx.room:room-ktx:2.6.1'
    kapt 'androidx.room:room-compiler:2.6.1'
    implementation 'androidx.datastore:datastore-preferences:1.0.0'
    
    // Crypto & Security
    implementation 'org.bitcoinj:bitcoinj-core:0.16.2'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    
    // Performance & Monitoring
    implementation 'androidx.benchmark:benchmark-common:1.2.2'
    implementation 'androidx.tracing:tracing:1.2.0'
    
    // Unit Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.2.1'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'org.robolectric:robolectric:4.11.1'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'androidx.test.ext:junit:1.1.5'
    
    // Integration Testing
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    
    // Compose Testing
    androidTestImplementation platform('androidx.compose:compose-bom:2024.02.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    
    // Performance Testing
    androidTestImplementation 'androidx.benchmark:benchmark-junit4:1.2.2'
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.5.1'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    
    // Test Orchestrator for reliable testing
    androidTestUtil 'androidx.test:orchestrator:1.4.2'
    
    // Mock testing for integration tests
    androidTestImplementation 'org.mockito:mockito-android:5.8.0'
    androidTestImplementation 'org.mockito.kotlin:mockito-kotlin:5.2.1'
    
    // Device testing utilities
    androidTestImplementation 'androidx.test.ext:truth:1.5.0'
    androidTestImplementation 'com.google.truth:truth:1.4.0'
}

// Gradle tasks for mobile mining testing
tasks.register('runMiningBenchmarks', Test) {
    group = 'verification'
    description = 'Run mobile mining performance benchmarks'
    
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'concurrent'
    
    include '**/device/DeviceValidationTest.class'
    include '**/integration/MiningIntegrationTest.class'
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

tasks.register('runDeviceCompatibilityTests') {
    group = 'verification'
    description = 'Run device compatibility tests across multiple device configurations'
    
    dependsOn 'connectedBenchmarkAndroidTest'
    
    doLast {
        println "Device compatibility tests completed"
        println "Check reports in build/reports/androidTests/"
    }
}

tasks.register('generatePerformanceReport') {
    group = 'reporting'
    description = 'Generate comprehensive performance report from test results'
    
    dependsOn 'runMiningBenchmarks'
    
    doLast {
        def reportDir = file("$buildDir/reports/performance")
        reportDir.mkdirs()
        
        println "Performance report generated in: $reportDir"
    }
}

// ARM64 optimization verification
tasks.register('verifyARM64Optimizations') {
    group = 'verification'
    description = 'Verify ARM64 optimizations are properly compiled'
    
    dependsOn 'externalNativeBuildBenchmark'
    
    doLast {
        def soFile = file("$buildDir/intermediates/merged_native_libs/benchmark/out/lib/arm64-v8a/libshellmining.so")
        if (soFile.exists()) {
            println "✅ ARM64 native library compiled successfully"
            
            // Check for NEON optimizations in compiled binary
            exec {
                commandLine 'objdump', '-d', soFile.absolutePath
                standardOutput = new ByteArrayOutputStream()
                doLast {
                    def output = standardOutput.toString()
                    if (output.contains('neon') || output.contains('simd')) {
                        println "✅ NEON optimizations detected in compiled binary"
                    } else {
                        println "⚠️ NEON optimizations not detected - verify compilation flags"
                    }
                }
            }
        } else {
            throw new GradleException("ARM64 native library not found")
        }
    }
}

// Integration with CI/CD
tasks.register('ciMobileTests') {
    group = 'ci'
    description = 'Run comprehensive mobile mining tests for CI/CD pipeline'
    
    dependsOn 'test', 'connectedAndroidTest', 'runMiningBenchmarks'
    
    // Ensure tests run in order
    test.finalizedBy 'connectedAndroidTest'
    connectedAndroidTest.finalizedBy 'runMiningBenchmarks'
    
    doLast {
        println "🎉 All mobile mining tests completed successfully"
        println "Ready for deployment to mobile devices"
    }
}

// Cleanup task for testing
tasks.register('cleanTestData') {
    group = 'cleanup'
    description = 'Clean test data and temporary files'
    
    doLast {
        delete fileTree(dir: '/data/data/com.shell.miner/cache/', include: '**/*')
        delete fileTree(dir: 'build/tmp/kotlin-classes/', include: '**/*')
        println "Test data cleaned"
    }
} 